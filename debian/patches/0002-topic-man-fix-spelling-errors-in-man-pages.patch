From 7a3ad19fb1dcf87be2a0b690b8dbd54d1ce5c36a Mon Sep 17 00:00:00 2001
From: Manoj Srivastava <srivasta@golden-gryphon.com>
Date: Sun, 28 Apr 2013 02:48:57 -0700
Subject: [topic--man-fix]: spelling errors in man pages

seperately separately
explicitely explicitly
noticable noticeable
enviroment environment

Signed-off-by: Manoj Srivastava <srivasta@golden-gryphon.com>
(cherry picked from commit ca33ddc478e32e645ad8fce4760a6d8fbfd8cda1)
---
 Changes                            |    4 ++--
 README                             |    6 +++---
 lib/Log/Log4perl.pm                |    8 ++++----
 lib/Log/Log4perl/Appender/File.pm  |    2 +-
 lib/Log/Log4perl/Appender/Limit.pm |    2 +-
 lib/Log/Log4perl/Config.pm         |    2 +-
 lib/Log/Log4perl/FAQ.pm            |    6 +++---
 lib/Log/Log4perl/JavaMap.pm        |    2 +-
 lib/Log/Log4perl/Level.pm          |    2 +-
 t/026FileApp.t                     |    2 +-
 t/028Additivity.t                  |    2 +-
 11 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/Changes b/Changes
index 459427d..81cfc6c 100644
--- a/Changes
+++ b/Changes
@@ -719,7 +719,7 @@
            still be called __ANON__, but this can be overridden by 
            defining
                local *__ANON__ = "subroutine_name";
-           in them explicitely (thanks, Perlmonks :).
+           in them explicitly (thanks, Perlmonks :).
 
 0.41 (12/12/2003)
     * (ms) Applied documentation update for Synchronized appender, suggested
@@ -778,7 +778,7 @@
     * (ms) Matthew Keene <mkeene@netspace.net.au> suggested to have
       an accessor for all appenders currently defined -- added 
       appenders() method
-    * (ms) Test case 041SafeEval.t didn't share $0 explicitely and
+    * (ms) Test case 041SafeEval.t didn't share $0 explicitly and
       created some warnings, fixed that with (jf)'s help.
     * (ms) Added performance improvements suggested by
       Kyle R. Burton <mortis@voicenet.com>. is_debug/is_info/etc.
diff --git a/README b/README
index 60a47c3..f5ed349 100644
--- a/README
+++ b/README
@@ -628,7 +628,7 @@ How to use it
     But you need to be aware that there's a small hit every time your code
     encounters a log statement -- no matter if logging is enabled or not.
     "Log::Log4perl" has been designed to keep this so low that it will be
-    unnoticable to most applications.
+    unnoticeable to most applications.
 
     Here's a couple of tricks which help "Log::Log4perl" to avoid
     unnecessary delays:
@@ -918,7 +918,7 @@ Categories
 
     If you're afraid that the components of your system are stepping on each
     other's toes or if you are thinking that different components should
-    initialize Log::Log4perl seperately, try to consolidate your system to
+    initialize Log::Log4perl separately, try to consolidate your system to
     use a centralized Log4perl configuration file and use Log4perl's
     *categories* to separate your components.
 
@@ -1118,7 +1118,7 @@ Cool Tricks
     without having to retype the pattern definitions.
 
     Variable substitution via "${varname}" will first try to find an
-    explicitely defined variable. If that fails, it will check your shell's
+    explicitly defined variable. If that fails, it will check your shell's
     environment for a variable of that name. If that also fails, the program
     will "die()".
 
diff --git a/lib/Log/Log4perl.pm b/lib/Log/Log4perl.pm
index 301f9ed..5967fbd 100644
--- a/lib/Log/Log4perl.pm
+++ b/lib/Log/Log4perl.pm
@@ -366,7 +366,7 @@ sub get_logger {  # Get an instance (shortcut)
 
     # Note that (4) L4pSubclass->get_logger() => ("L4pSubclass")
     # is indistinguishable from (3) and therefore can't be allowed.
-    # Wrapper classes always have to specify the category explicitely.
+    # Wrapper classes always have to specify the category explicitly.
 
     my $category;
 
@@ -1285,7 +1285,7 @@ to allow for maximum performance, both with logging enabled and disabled.
 But you need to be aware that there's a small hit every time your code
 encounters a log statement -- no matter if logging is enabled or not. 
 C<Log::Log4perl> has been designed to keep this so low that it will
-be unnoticable to most applications.
+be unnoticeable to most applications.
 
 Here's a couple of tricks which help C<Log::Log4perl> to avoid
 unnecessary delays:
@@ -1589,7 +1589,7 @@ can be used.
 
 If you're afraid that the components of your system are stepping on 
 each other's toes or if you are thinking that different components should
-initialize Log::Log4perl seperately, try to consolidate your system
+initialize Log::Log4perl separately, try to consolidate your system
 to use a centralized Log4perl configuration file and use 
 Log4perl's I<categories> to separate your components.
 
@@ -1806,7 +1806,7 @@ This is a convenient way to define two appenders with the same layout
 without having to retype the pattern definitions.
 
 Variable substitution via C<${varname}> 
-will first try to find an explicitely defined 
+will first try to find an explicitly defined 
 variable. If that fails, it will check your shell's environment
 for a variable of that name. If that also fails, the program will C<die()>.
 
diff --git a/lib/Log/Log4perl/Appender/File.pm b/lib/Log/Log4perl/Appender/File.pm
index 895e236..f7e4283 100755
--- a/lib/Log/Log4perl/Appender/File.pm
+++ b/lib/Log/Log4perl/Appender/File.pm
@@ -284,7 +284,7 @@ Log::Log4perl::Appender::File - Log to file
 This is a simple appender for writing to a file.
 
 The C<log()> method takes a single scalar. If a newline character
-should terminate the message, it has to be added explicitely.
+should terminate the message, it has to be added explicitly.
 
 Upon destruction of the object, the filehandle to access the
 file is flushed and closed.
diff --git a/lib/Log/Log4perl/Appender/Limit.pm b/lib/Log/Log4perl/Appender/Limit.pm
index 38dc827..1f34990 100644
--- a/lib/Log/Log4perl/Appender/Limit.pm
+++ b/lib/Log/Log4perl/Appender/Limit.pm
@@ -219,7 +219,7 @@ __END__
     WARN("This message will be sent immediately.");
     WARN("This message will be delayed by one hour.");
     sleep(3601);
-    WARN("This message plus the last one will be sent now, seperately.");
+    WARN("This message plus the last one will be sent now, separately.");
 
 =head1 DESCRIPTION
 
diff --git a/lib/Log/Log4perl/Config.pm b/lib/Log/Log4perl/Config.pm
index 6eebeeb..72cff47 100644
--- a/lib/Log/Log4perl/Config.pm
+++ b/lib/Log/Log4perl/Config.pm
@@ -1131,7 +1131,7 @@ certainly override it:
     log4perl.appender.A1.layout=Log::Log4perl::Layout::SimpleLayout
 
 C<write> is the C<mode> that has C<Log::Log4perl::Appender::File>
-explicitely clobber the log file if it exists.
+explicitly clobber the log file if it exists.
 
 =head2 Configuration files encoded in utf-8
 
diff --git a/lib/Log/Log4perl/FAQ.pm b/lib/Log/Log4perl/FAQ.pm
index 75cf7d6..8fa54b4 100644
--- a/lib/Log/Log4perl/FAQ.pm
+++ b/lib/Log/Log4perl/FAQ.pm
@@ -1436,7 +1436,7 @@ C<"append"> mode, the OS kernel ensures that multiple processes share
 one end-of-file marker, ensuring that each process writes to the I<real> 
 end of the file. (The value of C<"append"> 
 for the C<mode> parameter is the default setting in Log4perl's file 
-appender so you don't have to set it explicitely.)
+appender so you don't have to set it explicitly.)
 
       # Guarantees atomic writes
 
@@ -1778,7 +1778,7 @@ you'll get an error message like
 Why? At compile time, C<pp> didn't realize that 
 C<Log::Log4perl::Appender::Screen> would be needed later on and didn't
 wrap it into the executable created. To avoid this, either say
-C<use Log::Log4perl::Appender::Screen> in the script explicitely or
+C<use Log::Log4perl::Appender::Screen> in the script explicitly or
 compile it with
 
     pp -o mytest -M Log::Log4perl::Appender::Screen mytest.pl
@@ -2267,7 +2267,7 @@ the place and slow down execution to a crawl at high debug levels.
 Remote-controlling logging in the hierarchical parts of an application
 via Log4perl's categories is one of its most distinguished features.
 It allows for enabling high debug levels in specified areas without
-noticable performance impact.
+noticeable performance impact.
 
 =head2 I want to use UTC instead of the local time!
 
diff --git a/lib/Log/Log4perl/JavaMap.pm b/lib/Log/Log4perl/JavaMap.pm
index 856732b..e850740 100644
--- a/lib/Log/Log4perl/JavaMap.pm
+++ b/lib/Log/Log4perl/JavaMap.pm
@@ -127,7 +127,7 @@ These will probably not be implemented
 
 =head1 ROLL YOUR OWN
 
-Let's say you've in a mixed Java/Perl enviroment and you've
+Let's say you've in a mixed Java/Perl environment and you've
 come up with some custom Java appender with behavior you want to 
 use in both worlds, C<myorg.customAppender>.  You write a
 Perl appender with the same behavior C<Myorg::CustomAppender>. You
diff --git a/lib/Log/Log4perl/Level.pm b/lib/Log/Log4perl/Level.pm
index e61e839..9540985 100644
--- a/lib/Log/Log4perl/Level.pm
+++ b/lib/Log/Log4perl/Level.pm
@@ -268,7 +268,7 @@ if you pull it in providing the C<:levels> tag:
     use Log::Log4perl qw(:levels);
 
 This is the preferred way, there's usually no need to call 
-C<Log::Log4perl::Level> explicitely.
+C<Log::Log4perl::Level> explicitly.
 
 The numerical values assigned to these constants are purely virtual,
 only used by Log::Log4perl internally and can change at any time,
diff --git a/t/026FileApp.t b/t/026FileApp.t
index aa074a0..107bcc7 100644
--- a/t/026FileApp.t
+++ b/t/026FileApp.t
@@ -59,7 +59,7 @@ close FILE;
 
 ####################################################
 # Append to a log file without specifying append mode
-# explicitely
+# explicitly
 ####################################################
 my $data = <<EOT;
 log4j.category = INFO, FileAppndr
diff --git a/t/028Additivity.t b/t/028Additivity.t
index 207d2f0..8298561 100644
--- a/t/028Additivity.t
+++ b/t/028Additivity.t
@@ -72,7 +72,7 @@ ok($buf2, "INFO - Percolate this!\n");
 Log::Log4perl::Appender::TestBuffer->reset();
 
 ######################################################################
-# Define the root logger and another logger, additivity on explicitely
+# Define the root logger and another logger, additivity on explicitly
 ######################################################################
 Log::Log4perl->init(\<<'EOT');
     log4perl.logger = INFO, A1
